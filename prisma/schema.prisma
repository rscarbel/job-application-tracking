generator client {
  provider = "prisma-client-js"
  seed     = "./seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkMode {
  onsite
  remote
  hybrid
}

enum CompanyDesireability {
  high
  medium
  low
}

enum ApplicationStatus {
  applied
  interview
  offer
  rejected
  accepted
  passed
}

enum PayFrequency {
  hourly
  weekly
  biweekly
  monthly
  yearly
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  OTHER
}

enum ContactInteractionType {
  EMAIL
  CALL
  MEETING
  OTHER
}

enum CompanySize {
  TINY
  SMALL
  MEDIUM
  LARGE
  MASSIVE
}

enum CompanyType {
  GOVERNMENT_AGENCY
  NON_PROFIT
  PRIVATE
  PUBLIC
}

enum BenefitType {
  BONUSES_AND_INCENTIVES
  CASUAL_DRESS_CODE
  CHILDCARE_ASSISTANCE
  COMMUTER_BENEFITS
  COMPANY_CAR_OR_ALLOWANCE
  COMPANY_DISCOUNTS
  COMPANY_EVENTS_AND_RETREATS
  CONFERENCE_ATTENDANCE
  CULTURAL_LEAVE
  CUSTOMIZABLE_BENEFITS_PACKAGE
  DISABILITY_INSURANCE
  ELDER_CARE_ASSISTANCE
  EMERGENCY_CHILD_AND_ELDER_CARE
  EMPLOYEE_ASSISTANCE_PROGRAMS
  EMPLOYEE_RECOGNITION_PROGRAMS
  EXTENDED_MATERNITY_AND_PATERNITY_LEAVE
  FINANCIAL_PLANNING_SERVICES
  FLEXIBLE_SCHEDULING
  FLEXIBLE_SPENDING_ACCOUNTS
  FREE_OR_SUBSIDIZED_MEALS
  GLOBAL_WORK_OPPORTUNITIES
  GREEN_COMMUTING_INCENTIVES
  GYM_MEMBERSHIPS
  HEALTH_INSURANCE
  HEALTH_SAVINGS_ACCOUNTS
  HEALTHCARE_SPECIALIST_ACCESS
  HOME_OFFICE_STIPEND
  HOUSING_ASSISTANCE
  IDENTITY_THEFT_PROTECTION
  LANGUAGE_LEARNING_ASSISTANCE
  LEGAL_ASSISTANCE
  LIFE_INSURANCE
  MENTAL_HEALTH_ASSISTANCE
  MENTORSHIP_PROGRAMS
  MOVING_EXPENSE_REIMBURSEMENT
  ONSITE_CHILDCARE_FACILITIES
  PAID_PARENTAL_LEAVE
  PAID_TIME_OFF
  PARKING_BENEFITS
  PET_FRIENDLY_WORKPLACE
  PET_INSURANCE
  PROFESSIONAL_MEMBERSHIPS
  RELOCATION_ASSISTANCE
  REMOTE_WORK_OPTIONS
  RETIREMENT_PLANS
  SABBATICAL_LEAVE
  SOCIAL_IMPACT_PROJECTS
  STOCK_OPTIONS
  STRESS_MANAGEMENT_PROGRAMS
  SUBSTANCE_ABUSE_ASSISTANCE
  TECHNOLOGY_ALLOWANCE
  TEMPORARY_HOUSING_ASSISTANCE
  TRAINING_AND_DEVELOPMENT
  TUITION_REIMBURSEMENT
  VOLUNTEER_TIME_OFF
  WELLNESS_PROGRAMS
}

model Application {
  id                 Int               @id @default(autoincrement())
  applicationDate    DateTime?
  applicationLink    String?
  job                Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId              Int
  positionIndex      Int
  notes              String?
  status             ApplicationStatus @default(applied)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  applicationGroup   ApplicationGroup  @relation(fields: [applicationGroupId], references: [id], onDelete: Cascade)
  applicationGroupId Int
  documents          Document[]
  interviews         Interview[]
  tags               ApplicationTag[]

  @@index([applicationGroupId])
}

model ApplicationTag {
  id           Int              @id @default(autoincrement())
  name         String
  group        ApplicationGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId      Int
  applications Application[]

  @@unique([name, groupId])
  @@index([groupId])
}

model Job {
  id               Int           @id @default(autoincrement())
  title            String
  responsibilities String[]
  benefits         BenefitType[]
  description      String?
  company          Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        Int
  applications     Application[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  workMode         WorkMode      @default(onsite)
  compensation     Compensation?
  addresses        Address[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt

  @@unique([title, companyId, userId, workMode])
  @@index([companyId])
  @@index([userId])
}

model Compensation {
  id             Int          @id @default(autoincrement())
  payAmount      Float        @default(0)
  payFrequency   PayFrequency @default(hourly)
  currency       String       @default("USD")
  salaryRangeMin Float?
  salaryRangeMax Float?
  hoursWeek      Int          @default(40)
  negotiable     Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  job            Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId          Int          @unique

  @@index([jobId])
}

model ApplicationGroup {
  id           Int              @id @default(autoincrement())
  name         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  isActive     Boolean          @default(true)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  applications Application[]
  tags         ApplicationTag[]

  @@unique([name, userId])
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  firstName         String?
  lastName          String?
  imageURL          String?
  oAuth             OAuth[]
  applicationGroups ApplicationGroup[]
  companies         Company[]
  emailTemplates    EmailTemplate[]
  contacts          Contact[]
  jobs              Job[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  addresses         Address[]
  documents         Document[]
}

model Company {
  id          Int                @id @default(autoincrement())
  name        String
  contacts    Contact[]
  jobs        Job[]
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt
  addresses   Address[]
  details     CompanyDetail?
  preferences CompanyPreference?

  @@unique([name, userId])
  @@index([userId])
}

model CompanyDetail {
  id          Int          @id @default(autoincrement())
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int          @unique
  culture     String?
  industry    String?
  size        CompanySize?
  website     String?
  type        CompanyType?
  history     String?
  mission     String?
  vision      String?
  values      String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  @@index([companyId])
}

model CompanyPreference {
  id            Int                   @id @default(autoincrement())
  desireability CompanyDesireability?
  notes         String?
  company       Company               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     Int                   @unique
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @default(now()) @updatedAt

  @@index([companyId])
}

model Contact {
  id           Int                  @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String?
  email        String?
  company      Company?             @relation(fields: [companyId], references: [id])
  companyId    Int?
  notes        String?
  attributes   ContactAttribute[]
  interactions ContactInteraction[]
  addresses    Address[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([userId, firstName, lastName, email, companyId])
  @@index([companyId])
}

model ContactAttribute {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId Int

  @@unique([name, contactId])
}

model Address {
  id             Int       @id @default(autoincrement())
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  country        String?   @default("United States")
  postalCode     String?
  fromDate       DateTime  @default(now())
  throughDate    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  Job            Job?      @relation(fields: [jobId], references: [id])
  jobId          Int?
  User           User?     @relation(fields: [userId], references: [id])
  userId         String?
  Company        Company?  @relation(fields: [companyId], references: [id])
  companyId      Int?
  Contact        Contact?  @relation(fields: [contactId], references: [id])
  contactId      Int?

  @@index([jobId])
  @@index([userId])
  @@index([companyId])
  @@index([contactId])
}

model EmailTemplate {
  id        Int      @id @default(autoincrement())
  name      String
  subject   String
  body      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model Interview {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId Int
  scheduledTime DateTime
  location      String?
  notes         String?
  feedback      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@index([applicationId])
}

model OAuth {
  id         Int      @id @default(autoincrement())
  provider   String
  externalId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@unique([provider, externalId])
}

model Document {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  applications Application[]
  type         DocumentType
  url          String?
  name         String
  content      String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt

  @@index([userId])
}

model ContactInteraction {
  id              Int                    @id @default(autoincrement())
  contact         Contact                @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId       Int
  type            ContactInteractionType
  notes           String?
  interactionTime DateTime
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now()) @updatedAt

  @@index([contactId])
}
