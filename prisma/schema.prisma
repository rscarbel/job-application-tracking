generator client {
  provider = "prisma-client-js"
  seed     = "./seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkMode {
  onsite
  remote
  hybrid
}

enum ApplicationStatus {
  applied
  interview
  offer
  rejected
  accepted
  passed
}

enum PayFrequency {
  hourly
  weekly
  biweekly
  monthly
  yearly
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  OTHER
}

enum ContactInteractionType {
  EMAIL
  CALL
  MEETING
  OTHER
}

enum CompanySize {
  TINY
  SMALL
  MEDIUM
  LARGE
  MASSIVE
}

enum CompanyType {
  GOVERNMENT_AGENCY
  NON_PROFIT
  PRIVATE
  PUBLIC
}

model ApplicationCard {
  id                 Int               @id @default(autoincrement())
  applicationDate    DateTime?
  applicationLink    String?
  job                Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId              Int
  positionIndex      Int
  notes              String?
  status             ApplicationStatus @default(applied)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  applicationBoard   ApplicationBoard  @relation(fields: [applicationBoardId], references: [id], onDelete: Cascade)
  applicationBoardId Int
  documents          Document[]
  interviews         Interview[]
  tags               ApplicationTag[]

  @@index([applicationBoardId])
}

model ApplicationTag {
  id           Int               @id @default(autoincrement())
  name         String
  board        ApplicationBoard  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId      Int
  applications ApplicationCard[]

  @@unique([name, boardId])
  @@index([boardId])
}

model Job {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
  applications ApplicationCard[]
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  workMode     WorkMode?
  compensation Compensation?
  address      JobAddress?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt

  @@unique([title, companyId, userId, workMode])
  @@index([companyId])
  @@index([userId])
}

model Compensation {
  id                Int          @id @default(autoincrement())
  payAmount         Float        @default(0)
  payFrequency      PayFrequency @default(hourly)
  currency          String       @default("USD")
  benefits          Json?
  bonuses           Json?
  allowances        Json?
  salaryRangeMin    Float?
  salaryRangeMax    Float?
  hoursWeek         Int         @default(40)
  negotiable        Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  job               Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId             Int          @unique
}

model ApplicationBoard {
  id               Int               @id @default(autoincrement())
  name             String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  applicationCards ApplicationCard[]
  tags             ApplicationTag[]

  @@unique([name, userId])
}

model User {
  id             String             @id @default(uuid())
  email          String             @unique
  firstName      String?
  lastName       String?
  imageURL       String?
  oAuth          OAuth[]
  applications   ApplicationBoard[]
  companies      Company[]
  emailTemplates EmailTemplate[]
  contacts       Contact[]
  jobs           Job[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @default(now()) @updatedAt
  addresses      UserAddress[]
  documents      Document[]
}

model Company {
  id         Int             @id @default(autoincrement())
  name       String
  contacts   Contact[]
  jobs       Job[]
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  locationId Int?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @default(now()) @updatedAt
  address    CompanyAddress?
  details    CompanyDetail?

  @@unique([name, userId])
  @@index([userId])
}

model CompanyDetail {
  id            Int          @id @default(autoincrement())
  company       Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     Int          @unique
  culture       String?
  desireability Int?
  industry      String?
  size          CompanySize?
  website       String?
  type          CompanyType?
  history       String?
  mission       String?
  vision        String?
  values        String?
  description   String?
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt

  @@index([companyId])
}

model Contact {
  id           Int                  @id @default(autoincrement())
  firstName    String
  lastName     String
  phone        String?
  email        String?
  company      Company?             @relation(fields: [companyId], references: [id])
  companyId    Int?
  notes        String?
  attributes   ContactAttribute[]
  interactions ContactInteraction[]
  addresses    ContactAddress[]
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([userId, firstName, lastName, email, companyId])
  @@index([companyId])
}

model ContactAttribute {
  id        Int     @id @default(autoincrement())
  name      String
  value     String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId Int

  @@unique([name, contactId])
}

model UserAddress {
  id             Int       @id @default(autoincrement())
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  country        String?   @default("United States")
  postalCode     String?
  fromDate       DateTime  @default(now())
  throughDate    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique
}

model JobAddress {
  id             Int      @id @default(autoincrement())
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  country        String?  @default("United States")
  postalCode     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  job            Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobId          Int      @unique
}

model CompanyAddress {
  id             Int      @id @default(autoincrement())
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  country        String?  @default("United States")
  postalCode     String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int      @unique
}

model ContactAddress {
  id             Int       @id @default(autoincrement())
  streetAddress  String?
  streetAddress2 String?
  city           String?
  state          String?
  country        String?   @default("United States")
  postalCode     String?
  fromDate       DateTime  @default(now())
  throughDate    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId      Int       @unique
}

model EmailTemplate {
  id      Int    @id @default(autoincrement())
  name    String
  subject String
  body    String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@unique([name, userId])
  @@index([userId])
}

model Interview {
  id                Int             @id @default(autoincrement())
  applicationCard   ApplicationCard @relation(fields: [applicationCardId], references: [id], onDelete: Cascade)
  applicationCardId Int
  scheduledTime     DateTime
  location          String?
  notes             String?
  feedback          String?

  @@index([applicationCardId])
}

model OAuth {
  id         Int    @id @default(autoincrement())
  provider   String
  externalId String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([provider, externalId])
}

model Document {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  applicationCards ApplicationCard[]
  type             DocumentType
  url              String?
  name             String
  content          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt

  @@index([userId])
}

model ContactInteraction {
  id              Int                    @id @default(autoincrement())
  contact         Contact                @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId       Int
  type            ContactInteractionType
  notes           String?
  interactionTime DateTime
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now()) @updatedAt

  @@index([contactId])
}
